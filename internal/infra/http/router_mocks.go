// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/infra/http/router.go
//
// Generated by this command:
//
//	mockgen -source ./internal/infra/http/router.go -destination ./internal/infra/http/router_mocks.go -package http
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	app "github.com/simpler-tha/internal/app"
	gomock "go.uber.org/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *Mockservice) CreateProduct(ctx context.Context, dto app.CreateProductDTO) (*app.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, dto)
	ret0, _ := ret[0].(*app.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockserviceMockRecorder) CreateProduct(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*Mockservice)(nil).CreateProduct), ctx, dto)
}

// DeleteProduct mocks base method.
func (m *Mockservice) DeleteProduct(ctx context.Context, productID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockserviceMockRecorder) DeleteProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*Mockservice)(nil).DeleteProduct), ctx, productID)
}

// GetProduct mocks base method.
func (m *Mockservice) GetProduct(ctx context.Context, productID uuid.UUID) (*app.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productID)
	ret0, _ := ret[0].(*app.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockserviceMockRecorder) GetProduct(ctx, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*Mockservice)(nil).GetProduct), ctx, productID)
}

// GetProducts mocks base method.
func (m *Mockservice) GetProducts(ctx context.Context, limit, offset int) ([]*app.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, limit, offset)
	ret0, _ := ret[0].([]*app.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockserviceMockRecorder) GetProducts(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*Mockservice)(nil).GetProducts), ctx, limit, offset)
}

// UpdateProduct mocks base method.
func (m *Mockservice) UpdateProduct(ctx context.Context, dto app.UpdateProductDTO) (*app.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, dto)
	ret0, _ := ret[0].(*app.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockserviceMockRecorder) UpdateProduct(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*Mockservice)(nil).UpdateProduct), ctx, dto)
}
